=encoding utf-8

=head1 NAME

Mojolicious::Plugin::SessionTags - Use bit flag session tags for user information.

=head1 VERSION

0.07

=head1 SYNOPSIS

  # Mojolicious:

  $app->plugin( 'session_tags' => { tags => [qw/ user writer admin tester /] });

  # Controllers:

  $c->add_tag( $_ ) for qw/ writer admin /;

  ... if $c->has_tag( 'admin' );  # Returns true
  ... if $c->has_tag( 'writer' ); # Returns true
  ... if $c->has_tag( 'user' );   # Returns false
  ... if $c->has_tag( 'tester' ); # Returns false

  ... if $c->not_tag( 'admin' );  # Returns false
  ... if $c->not_tag( 'tester' ); # Returns true

  $c->nix_tag( 'writer' );

  ... if $c->has_tag( 'writer' ); # Now returns false

  # Templates:

  <nav>
    <ul>
      <li><a href="/">Home</a></li>
  %   if ( has_tag 'writer' ) {
      <li><a href="/writer">Writer</a></li>
  %   }
  %   if ( has_tag 'admin' ) {
      <li><a href="/admin">Admin</a></li>
  %   }
    </ul>
  </nav>

  # Using a custom name for a tag to give more meaning to the helpers.
  $app->plugin( name => 'role', 'session_tags' => { tags => [qw/ user writer admin tester /] });

  $c->add_role( $_ ) for qw/ writer admin /;

  ... if $c->has_role( 'admin' );  # Returns true
  ... if $c->has_role( 'tester' ); # Returns false


  # Use numerous tags to cover many uses:

  $app->plugin( 'session_tags' => { tags => [qw/ user_role creator_role admin_role tester_role new_stage trial_stage member_stage limbo_stage survey1_done survey2_done survey3_done /] });

  # Or subclass the plugin to allow more meaningful helper tags:

  package MyApp::Plugin::SessionRoles;
  use Mojo::Base 'Mojolicious::Plugin::SessionTags';

  package MyApp::Plugin::SessionStages;
  use Mojo::Base 'Mojolicious::Plugin::SessionTags';

  package MyApp::Plugin::SessionDone;
  use Mojo::Base 'Mojolicious::Plugin::SessionTags';

  # Mojolicious:

  $app->plugin( 'MyApp::Plugin::SessionRoles' => { name => 'role', tags => [qw/ user creator admin tester /] });
  $app->plugin( 'MyApp::Plugin::SessionStages' => { name => 'stage', tags => [qw/ new trial member limbo /] });
  $app->plugin( 'MyApp::Plugin::SessionDone' => { name => 'done', tags => [qw/ survey1 survey2 survey3 /] });

  # Controllers:

  $c->add_role( $_ ) for qw/ user admin /;
  $c->add_stage( $_ ) for qw/ trial /;
  $c->add_done( $_ ) for qw/ survey1 survey2 /;

  ... if $c->has_role( 'admin' );  # Returns true
  ... if $c->has_stage( 'member' );  # Returns false
  ... if $c->has_done( 'survey1' );  # Returns true
  ... if $c->not_done( 'survey3' );  # Returns true

=head1 DESCRIPTION

Mojolicious::Plugin::SessionTags uses bit flags to store basic user information in minimal space. Mojolicious defaults to using signed cookies, and cookies have a size limit. Using the defaults along with the value of 255, "st_tag":255, is all that is needed to store eight conditional "true" values.

=head1 METHODS

=head2 register

  $app->plugin( 'session_tags' => { name => 'tag', tags => \@tags } );

Registers the plugin into the Mojolicious app.

=head1 CONFIGURATION

=head2 name (optional)

Used to provide the key name in the session cookie (appended to "st_"). The default key is "st_tag." Also, "name" will be used as a base for the helpers.

If two or more subclasses are used, then "name" needs to be used and unique in each plugin.

=head2 tags

A list of the tags you want to assign.

=head1 HELPERS

All helpers default to ending with "_tag." If "name" is provided, then it will be used (ie. name => 'role', "_role").

=head2 sum_tag

=head2 sum_tag(0)

Returns the current session key value. If passed a 0, then the session key value is set to 0. Passing any other value does nothing. Creates the session key if it does not already exist. Each helper calls the sum helper internally so any helper can create the key as well.

=head2 add_tag( 'tag' )

Sets the bit flag for the tag.

=head2 nix_tag( 'tag' )

Removes the bit flag for the tag.

=head2 has_tag( 'tag' )

Returns 1 if the bit flag is set. Returns 0 if the bit flag is not set.

=head2 not_tag( 'tag' )

Returns 1 if the bit flag is not set. Returns 0 if the bit flag is set.

=head1 CAUTION

If at any time, the order of the tags in the configuration is changed (ie. tag deleted, sort order changed if coming from db), then be sure and change your session secret before restaring your app. Changing the secret will immediately wipe out the users' sessions, which is not nice but will prevent users with inaccurate values per the tags. Plan ahead.

=head1 SOURCE REPOSITORY

L<http://github.com/keenlinks/Mojolicious-Plugin-SessionTags>

=head1 AUTHOR

Scott Kiehn E<lt>sk.keenlinks@gmail.comE<gt>

=head1 COPYRIGHT

Copyright 2016- Scott Kiehn

=head1 LICENSE

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.

=head1 SEE ALSO

=cut
